
1、用<<、>>、|、&实现一个WORD(字，两个字节)（ABCD）的高低位交换。【美国著名计算机软件公司面试题】
#include <stdio.h>
int main(void)
{
	unsigned short a = 0XABCD;
	unsigned short b, c, d;
	b = (a << 8) & 0xff00;
	c = (a >> 8) & 0x00ff;
	d = b | c;
	printf("%#X\n", a);
	printf("%#X\n", d);
	
	return 0;
}


2、判断一个数是否是2的次方？
解答：
第一种：
	int is_2power(unsigned int n)
	{
		if(n==0)
			return 0;
		while((n & 1) == 0)   //注意区分逻辑与&&和按位与& (&优先级低于==)
			n = n >> 1;
		return n==1;
	}
	
第二种：
	int is_2power(unsigned int n)
	{
		if(n==0)
			return 0;
		return !( n & (n-1) );
	}



3、评价下面的代码片断：
unsigned int zero = 0; 
unsigned int compzero = 0xFFFF; /*complement(补码) of zero */

对于一个int型不是16位的处理器来说，上面的代码是不正确的。应编写如下：
unsigned int compzero = ~0;
这一问题真正能揭露出应试者是否懂得处理器字长的重要性。在我的经验里，好的嵌入式程序员非常准确地明白硬件的细节和它的局限，然而PC机程序往往把硬件作为一个无法避免的烦恼。




4、求下面函数的返回值，假定输入x = 9999。（微软）
int func(x)
{
    int count = 0;
    while(x) {
		count++;
		x = x&(x-1);
    }
    return count;
} 
答案：8
思路：
	将x转化为2进制，看含有的1的个数。
	知道了这是统计9999的二进制数值中有多少个1的函数，且有
	9999＝9×1024＋512＋256＋15
	9×1024中含有1的个数为2；
	512中含有1的个数为1；
	256中含有1的个数为1；
	15中含有1的个数为4；
	故共有1的个数为8，结果为8。
	1000 - 1 = 0111，正好是原数取反。这就是原理。
	用这种方法来求1的个数是效率很高的。
	不必去一个一个地移位。循环次数最少。

思路：
1）9999 / 16 = 624 + f = 624/16 + f = 39 + f = 39/16 + f = 2 + 7 + f
2）9999 = 8192 + 1807 = 8192 + 1024 + 783
					  = 8192 + 1024 + 512 + 271
					  = 8192 + 1024 + 512 + 256 + 15
					  = 1 + 1 + 1 + 1 + 4 = 8



5、下面的程序试图使用“位操作”来完成“乘5”的操作，不过这个程序中有个BUG，你知道是什么吗？
#include <stdio.h>
#define PrintInt(expr) printf("%s : %d\n",#expr,(expr))
int FiveTimes(int a)  
{
    int t;
    t = a << 2 + a; //应该改为 t = (a << 2) + a;
    return t;
}
int main()  
{
    int a = 1, b = 2, c = 3;
    PrintInt(FiveTimes(a));
    PrintInt(FiveTimes(b));
    PrintInt(FiveTimes(c));
    return 0;
}

参考答案：本题的问题在于函数FiveTimes中的表达式“t = a << 2 + a;”，对于a<<2这个位操作，优先级要比加法要低，所以这个表达式就成了“t = a << (2+a)”，于是我们就得不到我们想要的值。该程序修正如下：

int FiveTimes(int a)  
{
    int t;
    t = (a<<2) + a;
    return t;
}


6、如何判别一个数是unsigned。
参考答案:
#define issignal(x) (((x)>=0 && ~(x)>=0) ? 1:0) //为1是无符号 为0有符号


7、用一条语句实现：取出一个数的2到5位。
	(a >> 2) & ~(~0<<4);
	

8、如何将一个数a的第27位置1？清0？反转？	
	a |= (1<<27);
	a &= ~(1<<27);
	a ^= (1<<27);


9、嵌入式系统总是要用户对变量或寄存器进行位操作。给定一个整型变量a，写两段代码，第一个设置a的bit 3，第二个清除a 的bit 3。在以上两个操作中，要保持其它位不变。
对这个问题有三种基本的反应 
1). 不知道如何下手。该被面者从没做过任何嵌入式系统的工作。 
2). 用bit fields。Bit fields是被扔到C语言死角的东西，它保证你的代码在不同编译器之间是不可移植的，同时也保证了的你的代码是不可重用的。我最近不幸看到Infineon为其较复杂的通信芯片写的驱动程序，它用到了bit fields因此完全对我无用，因为我的编译器是用其它的方式来实现bit fields的。从道德讲：永远不要让一个非嵌入式的家伙粘实际硬件的边。 
3). 用 #define 和 bit masks 操作。这是一个有极高可移植性的方法，是应该被用到的方法。最佳的解决方案如下： 
#define BIT3 (0x1<<3) 
static int a; 
void set_bit3(void) 
{ 
	a |= BIT3; 
} 
void clear_bit3(void) 
{ 
	a &= ~BIT3; 
} 
或者直接用一条语句实现：
	a |= 1 << 3;
	a &= ~(1 << 3);

为设置和清除值而定义一个掩码同时定义一些说明常数，是不错的想法。我希望看到几个要点：说明常数、|=和&=~操作。



	
10、输出结果
static void test21()
{
	printf("%d, %x, %x, %x\n", ~0, ~0 >> 8, ~0 << 8, ~0u >> 8);
	printf("%x, %x, %x, %d\n", 1 >> 1, -16, -16 >> 1, -16 >> 1);
}
答案：
-1, ffffffff, ffffff00, ffffff
0, fffffff0, fffffff8, -8
//正数的原码 = 正数的补码， 负数的补码 = 负数原码取反 + 1
//1的原码： 0....0001
//-1的原码：1....0001

