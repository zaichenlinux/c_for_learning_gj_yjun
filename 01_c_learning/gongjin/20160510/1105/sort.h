#pragma once

#if 0
程序 ＝ 数据结构 ＋ 算法
数据结构：用特定的编程语言来表示数据的关系
研究的是两个方面：
  一、物理结构（数据在内存中的存储形式）
  二、逻辑结构（数据元素之间的关系：一对一，一对多，还是多对多）
算法：解决问题的步骤
算法的特征：
	1、可行性
	2、正确性
	3、确定性
	4、有输入和输出
	5、在有限步内必须结束
衡量算法的优劣：
	1、可读性
	2、正确性
	3、健壮性（鲁棒性）
	4、高效率、低存储
#endif

#if 0
排序中涉及到的基本概念：
1、算法的时间复杂度 
	频度：当前语句执行的次数
2、算法的空间复杂度
	是否需要借用除程序本身外的额外空间
3、算法的稳定性
	值相同的元素在排序后，位置关系没有发生变化的排序称为稳定的排序算法

4、排序算法的分类：
交换排序：冒泡排序、快速排序
选择排序：简单选择排序、堆排序
插入排序：一般插入排序、希尔排序
归并排序：两路归并、多路归并
#endif


typedef int elem_t;
struct sort {
	void (*bubble)(elem_t *, size_t); //冒泡排序
	void (*select)(elem_t *, size_t); //简单选择排序
	void (*insert)(elem_t *, size_t); //一般插入排序
	void (*quick)(elem_t *, size_t); //快速排序
	void (*heap)(elem_t *, size_t); //堆排序
	void (*shell)(elem_t *, size_t); //希尔排序
	void (*merge)(elem_t *, size_t); //归并排序
};

void sort_init(struct sort *);
